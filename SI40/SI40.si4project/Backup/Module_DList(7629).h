/**
  ******************************************************************************
  * @file    Module_DList.h
  * @author  徐松亮 许红宁(5387603@qq.com)
  * @version V1.0.0
  * @date    2018/01/01
  * @brief   module-driven -->   LED.
  * @note
  * @verbatim

 ===============================================================================
                     ##### How to use this driver #####
 ===============================================================================
   1,    适用芯片
         STM      :  STM32F1  STM32F4
         Nordic   :  Nrf51    Nrf52
   2,    移植步骤
         2.1   在Bsp_Led.h中设定时钟与引脚信息。
         2.2   在主函数调用            BspLed_Init()
         2.3   在100mS循环函数中调用   BspLed_100ms()
   3,    验证方法
         3.1   在Debug环境加入调试指令，执行后所有LED循环点亮，退出后所有LED关闭
   4,    使用方法
         4.1   用户可以调用Bsp_Led.h中的宏定义直接控制LED
   5,    其他说明
         -------------------- 链表特点
        1.优点:           插入快,删除快
        2.缺点:           查找慢
-------------------- 关于线性表链接存储（单链表）操作的19种算法
   1.初始化:         线性表，即置单链表的表头指针为空
   2.创建:           创建线性表，此函数输入负数终止读取数据
   3.遍历:           打印链表，链表的遍历
   4.清除:           清除线性表L中的所有元素，即释放单链表L中所有结点使之成为空表
   5.获取长度:       返回单链表的长度
   6.查空:           检查单链表是否为空，若为空则返回１，否则返回０
   7.按位置获取信息: 返回单链表中第pos个结点中的元素，若pos超范围，则停止程序运行
   8.按键值获取信息: 从单链表中查找具有给定值x的第一个元素，若成功则返回该结点data域的存储地址，否则返回NULL
   9.按位置修改键值: 把单链表中第pos个结点的值修改为x的值，若成功返回１，否则返回０
   10.头部插入:      向单链表的表头插入一个元素
   11.尾部插入:      向单链表的末尾添加一个元素
   12.按位置插入:    向单链表中第pos个结点位置插入元素为x的结点，成功返１，否则返０
   13.有序插入:      向有序单链表中插入元素x结点，使得插入后仍然有序
   14.头部删除:      从单链表中删除表头结点，并把该结点的值返回，若删除失败则停止程序运行
   15.尾部删除:      从单链表中删除表尾结点并返回它的值，若删除失败则停止程序运行
   16.按位置删除:    从单链表中删除第pos个结点并返回它的值，若删除失败则停止程序运行
   17.按键值删除:    从单链表中删除值为x的第一个结点，若删除成功则返回1,否则返回0
   18.交换:          交换2个元素的位置
   19.排序:          将线性表进行冒排序
   注意检查分配到的动态内存是否为空
  @endverbatim
  ******************************************************************************
  * @attention
  *
  * GNU General Public License (GPL)
  *
  * <h2><center>&copy; COPYRIGHT 2017 XSLXHN</center></h2>
  ******************************************************************************
  */

//--------------------------------
#ifndef __MODULE_DLIST_H
#define __MODULE_DLIST_H
//-------------------加载库函数------------------------------
#include "includes.h"
//--------------------------------
#define ModuleDList_DebugPrintf  DebugOutStr
//--------------------------------
void ModuleSList_DebugTestOnOff(uint8_t OnOff);
//--------------------------------
#endif
